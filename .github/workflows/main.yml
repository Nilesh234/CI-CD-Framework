name: CI/CD Pipeline Framework

on:
  push:
    branches:
      - main
      - develop
      - release/*
      - hotfix/*
  pull_request:

jobs:
  parse-blueprint:
    name: Parse Blueprint
    runs-on: ubuntu-latest
    outputs:
      tech: ${{ steps.extract.outputs.tech }}
      deploy: ${{ steps.extract.outputs.deploy }}
      build_type: ${{ steps.extract.outputs.build_type }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install YAML parser
        run: pip install pyyaml

      - name: Run blueprint parser
        run: python scripts/parse_blueprint.py

      - name: Extract Blueprint Variables
        id: extract
        run: |
          echo "tech=$(cat output_tech.txt)" >> $GITHUB_OUTPUT
          echo "deploy=$(cat output_deploy.txt)" >> $GITHUB_OUTPUT
          echo "build_type=$(cat output_build_type.txt)" >> $GITHUB_OUTPUT

  run-ci:
    name: Run CI Pipeline
    needs: parse-blueprint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [ "${{ needs.parse-blueprint.outputs.tech }}" ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Load Stages
        id: load_stages
        run: |
          cat output_stages.json
          echo "Stages loaded."

      - name: Execute Language-Specific Workflow
        run: |
          echo "Running CI for language: ${{ matrix.language }}"
          if [ "${{ matrix.language }}" == "python" ]; then
            bash scripts/python-ci.sh
          elif [ "${{ matrix.language }}" == "java" ]; then
            bash scripts/java-ci.sh
          elif [ "${{ matrix.language }}" == "node" ]; then
            bash scripts/node-ci.sh
          else
            echo "Unsupported language!"
            exit 1
          fi

  deploy:
    name: Deploy to Environment
    needs: run-ci
    if: ${{ needs.parse-blueprint.outputs.deploy != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Load Deployment Target
        run: cat output_deployment_target.json

      - name: Deploy Application
        run: |
          DEPLOY_TOOL=$(jq -r '.deployment_method' output_deployment_target.json)
          ENVIRONMENT=$(jq -r '.environment' output_deployment_target.json)
          REGION=$(jq -r '.region' output_deployment_target.json)
          SERVICE=$(jq -r '.service' output_deployment_target.json)

          echo "Deploying with tool: $DEPLOY_TOOL to $ENVIRONMENT in $REGION (Service: $SERVICE)"

          if [ "$DEPLOY_TOOL" == "terraform" ]; then
            cd deploy/terraform
            terraform init
            terraform apply -auto-approve
          elif [ "$DEPLOY_TOOL" == "sam" ]; then
            cd deploy/sam
            sam build
            sam deploy --config-env $ENVIRONMENT
          elif [ "$DEPLOY_TOOL" == "cdk" ]; then
            cd deploy/cdk
            cdk deploy --require-approval never
          else
            echo "Unsupported deployment method!"
            exit 1
          fi