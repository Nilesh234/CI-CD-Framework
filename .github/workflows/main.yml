name: Dynamic CI/CD Framework

on:
  push:
    branches: [ "main", "dev", "staging" ]
    tags: 
      - "v*.*.*"
  pull_request:
    branches: [ "main", "dev", "staging" ]

jobs:
  generate-ci-cd:
    name: Generate CI/CD Stages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyyaml  # Ensure PyYAML is installed

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Parse Blueprint and Generate Stages
        run: |
          python scripts/parse_blueprint.py

      - name: Determine Branch and Tag Compliance
        run: |
          bash scripts/branch-tag-validator.sh

      - name: Run Technology Specific CI
        run: |
          TECH=$(jq -r '.technology' blueprint.json)
          echo "Technology Stack: $TECH"

          if [[ "$TECH" == "java" ]]; then
            bash scripts/java-ci.sh
          elif [[ "$TECH" == "nodejs" ]]; then
            bash scripts/node-ci.sh
          elif [[ "$TECH" == "python" ]]; then
            bash scripts/python-ci.sh
          else
            echo "Unsupported technology stack: $TECH"
            exit 1
          fi

      - name: Deploy to Target Environment
        run: |
          DEPLOYMENT_TYPE=$(jq -r '.deployment_method' blueprint.json)
          echo "Deployment Method: $DEPLOYMENT_TYPE"

          if [[ "$DEPLOYMENT_TYPE" == "terraform" ]]; then
            cd deploy/terraform
            terraform init
            terraform apply -auto-approve
          elif [[ "$DEPLOYMENT_TYPE" == "sam" ]]; then
            cd deploy/sam
            sam build
            sam deploy --guided
          elif [[ "$DEPLOYMENT_TYPE" == "cdk" ]]; then
            cd deploy/cdk
            npm install
            npx cdk deploy --all --require-approval never
          else
            echo "Unsupported deployment method: $DEPLOYMENT_TYPE"
            exit 1
          fi
